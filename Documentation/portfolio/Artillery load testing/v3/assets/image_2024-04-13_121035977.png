<!DOCTYPE html> <html> <body> <p>In order to get an idea of the load the system can handle, I conducted some load tests with Artillery. Keep in mind that everything regarding the test was performed on my personal machine, including:</p><ul><li><p>Minikube's cluster</p></li><li><p>Running the load tests</p></li><li><p>Running the database in docker</p></li></ul><p>The cluster's (reserved) specs are as follows:</p><ul><li><p>I7 13700HX with 4 cores reserved for minikube</p></li><li><p>8GB DDR5 RAM</p></li><li><p>NVMe SSD</p></li></ul><p>Every Minikube deployment was configured to use about 1-1.5 cores when all of its pods were fully spooled up.</p><p>The load tests I conducted were the following:</p><ul><li><p>Logging in</p></li><li><p>Getting all listings</p></li><li><p>Creating a listing</p></li></ul><p>Below is an image of the Kubernetes pods under load, showing that the load is distributed near perfectly.</p><p><img src="https://portfolio.drieam.app/api/public/v1/blobs/545ea1b8-b9c6-4fdf-9e1d-cab50ed05fbf/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBMTA5QXc9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--af22fcb89838a6ce8653183a5d495fa6ea954435/image_2024-04-13_124919029.png" data-key="zt48vwrd3npqyxdvixy6v7mlu6j3"></p><p>Firstly, logging in</p><p>A test with artillery looks like this:</p><pre><code>config: # This is a test server run by team Artillery # It's designed to be highly scalable target: http://localhost:9998 phases: - duration: 60 arrivalRate: 1 rampTo: 5 name: Warm up phase - duration: 60 arrivalRate: 5 rampTo: 10 name: Ramp up load - duration: 30 arrivalRate: 10 rampTo: 30 name: Spike phase plugins: ensure: {} apdex: {} metrics-by-endpoint: {} apdex: threshold: 100 scenarios: - flow: - loop: - post: url: "/api/auth/login" json: email: "jdoe@mail.com" password: "123" count: 100</code></pre><p>It creates virtual users that send requests in phases. The phases in this test are 3: warm up, ramp up and spike phase. Each virtual user is instructed to send a post request to login 100 times.</p><p>Running the login test yields the following results:</p><p><img src="https://portfolio.drieam.app/api/public/v1/blobs/545ea1b8-b9c6-4fdf-9e1d-cab50ed05fbf/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBem85QXc9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--d2bf7f7ecae481f409db1777ad141f2978c28b6d/image_2024-04-13_114947357.png" data-key="dw37mjnoszbd0eq34t83kded7kmt">The app managed to satisfy 400 requests/sec which is a bit low, but it is normal for a login operation. This is because comparing passwords through hashing is quite a heavy process. Signing the JWT token is also cryptography, so it too slows it down.</p><hr><p>Next conducted tests is loading the app's home page, which gets all paginated listings. The results for this test amounted to the following:</p><p><img src="https://portfolio.drieam.app/api/public/v1/blobs/545ea1b8-b9c6-4fdf-9e1d-cab50ed05fbf/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBenM5QXc9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--740d87d0215c6801ad88782716dff3ca3e76f532/image_2024-04-13_115834005.png" data-key="lq9rwsdhgnvgpfbvaef12z05adyf">The listing microservice satisfied 1478 req/sec.<br></p><hr><p>The final conducted test was for the write of listings. It has lengthier flow which also involves the message broker and the bid microservice. Here, once again, the application was able to handle around 500 requests/sec before it started throttling.</p><p><img src="https://portfolio.drieam.app/api/public/v1/blobs/545ea1b8-b9c6-4fdf-9e1d-cab50ed05fbf/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBMFE5QXc9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--b4d04d0bd687381de190fb9b9033c372c2fba3b6/image_2024-04-13_121035977.png" data-key="vzjdqn7ivp9e2z29n5rxhbxlcetg"><br>In order to investigate the low performance, we can deduce a few things.</p><p>Considering that the actual post request was returned as soon as the listing was created, and that the saving of the ListingFragment is asynchronous, RabbitMQ was handling about 500 messages/sec.</p><p><img src="https://portfolio.drieam.app/api/public/v1/blobs/545ea1b8-b9c6-4fdf-9e1d-cab50ed05fbf/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBME05QXc9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--06dec82ea8e7fec41e649c6a8da7b3d385ca864b/image_2024-04-13_120852542.png" data-key="ossx4f1lhegtsijmpgx75otm3ubf"><br>We can also see that in the end, there were no unacknowledged messages and both the listing and bid database contain 60 000 records of listings.</p><p><img src="https://portfolio.drieam.app/api/public/v1/blobs/545ea1b8-b9c6-4fdf-9e1d-cab50ed05fbf/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBMFU5QXc9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--e396ddecbed069dbb34605e03a7b41efef5ff1b0/image_2024-04-13_121312156.png" data-key="pb7g8ci45fik29zsjfy5s757e3mo"><br><img src="https://portfolio.drieam.app/api/public/v1/blobs/545ea1b8-b9c6-4fdf-9e1d-cab50ed05fbf/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBMFk5QXc9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--1bc8e86b3882ee140550a8b662b2d41418e4de77/image_2024-04-13_121334173.png" data-key="sx9pmaxekohc16bj0s5xiyzf81oj">Investigating the database performance monitor, it also shows that there are no slow queries performed during the time period.</p><p><img src="https://portfolio.drieam.app/api/public/v1/blobs/545ea1b8-b9c6-4fdf-9e1d-cab50ed05fbf/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBMGM5QXc9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--62b25c28ff1aab1b38f54a483f24f21b64179dfc/image_2024-04-13_121514742.png" data-key="ewodhaolsqpscs7o6mo5pawiswip"></p><p>Furthermore, the slow performance cannot be blamed on Express, since performing a load test on a simple "Hello world" endpoint shows that express is more than capable of handling concurrent requests with 3000 requests/sec being satisfied.</p><p><img src="https://portfolio.drieam.app/api/public/v1/blobs/545ea1b8-b9c6-4fdf-9e1d-cab50ed05fbf/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBMGc5QXc9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--8ad2c6652ebd53d3ff2464d11f4bed8caed94760/image_2024-04-13_121915412.png" data-key="yko8n9hjryrlav1s3g6vzo7tg2v5">Therefore, we can conclude through the process of exclusion that the weakest link of the system is the Mongoose ORM. Doing some searching online it seems that testing Mongoose vs vanilla MongoDB, Mongoose is more than 3x slower.</p><p><img src="https://portfolio.drieam.app/api/public/v1/blobs/545ea1b8-b9c6-4fdf-9e1d-cab50ed05fbf/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBMG85QXc9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--d2568a8f5efa816de7cec13cfd59657bff2bad63/image_2024-04-13_122141518.png" data-key="xc4kpv2rxfelzvosycy9b3ysrr6k"></p> </body> </html>