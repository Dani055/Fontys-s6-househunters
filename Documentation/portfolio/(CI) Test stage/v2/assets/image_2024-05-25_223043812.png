<!DOCTYPE html> <html> <body> <p>The test stage of the CI/CD pipeline deals with running unit and integration tests for each individual microservice.</p><p><img src="https://portfolio.drieam.app/api/public/v1/blobs/545ea1b8-b9c6-4fdf-9e1d-cab50ed05fbf/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBMEN6QXc9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--598b55a7ac7be89b122dbd677ce16fd20cb918b7/image_2024-05-25_223043812.png" data-key="hzb68sykpxj5autoic70jjrha20u"></p><p>The testing of each microservice consists of running controller, unit and integration tests with a dedicated database. The database is created as a service in the CI job.</p><p>The code for testing the authentication microservice in the gitlab CI definition file is as follows:</p><pre><code>.test_template: image: node:iron-alpine services: - name: mongodb/mongodb-community-server:latest alias: mongo-integration stage: test before_script: - !reference [.common_scripts, npm_shared] # Test test-auth-ms: extends: .test_template variables: DB_CON_STRING: "mongodb://mongo-integration:27017/integration-hh-users" script: - !reference [.common_scripts, npm_auth_ms] - cp dotenv.test.example .env.test - npm run test</code></pre><p>The code for the other microservices is identical. This stage uses a template in order to levarage common yaml between the different microservices. A service of MongoDB runs so that the integration tests can pass, while the actual script executed creates the required environment file and run the test command.</p> </body> </html>