<!DOCTYPE html> <html> <body> <h2>Choosing database(s)</h2><p>The functional and non-functional requirements of the indivudial project can be found here <span data-type="mention" data-id="438024" data-label="Project plan (individual)" data-mention-type="evidence">@Project plan (individual)</span>. In order to satisfy these requirements, a choice about handling distributed data needs to be made. First of all, we can focus on the stability and availability requirements. According to them the system needs to be highly available and stable, which means that among the CAP properties, focus needs to be put on A(availability) and P(partition tolerance).</p><p>Having these requirements, we can already start thinking about a non-relational databases, since they are a lot easier to partition than relational databases, and most of the time prioritize availability over consistency. Moreover, they are better than relational databases in dealing with large quantities of data. It is particularly for this reason why big social medias like YouTube, Twitter, Netflix and etc. have mostly moved towards using non-relational databases.</p><p>Since my individual project this semester also resembles a social media, where availability is key, a non-relational database is generally well suited for the use case. There is the aspect of bidding, which in a real scenario would involve bank transactions, but that aspect of the system would definitely leverage a SQL database for its consistency, since it is key in such a use case. However, this project does not feature any bank transactions, so a NoSQL solution would work as well.</p><p>Having all of these requirements in mind, I have chosen MongoDB as a NoSQL solution to my project. <span style="color: rgb(0, 0, 0)">In the context of the CAP Theorem MongoDB, MongoDB is often classified as an AP (Availability/Partition tolerance) database. MongoDB achieves high availability by using a distributed architecture that allows for replica sets. It is also designed to handle network partitions and maintain system operation even when nodes are disconnected. The data replication mechanism allows for eventual consistency across the replica set.</span></p><h2>ERDs</h2><p>In order to satisfy the functional requirements, the ERDs and the databases they reside in can be found here <span data-type="mention" data-id="438031" data-label="ERD" data-mention-type="evidence">@ERD</span> . It also contains reasoning behind their design. As for GDPR and data sensitivity, the table below illustrates the nature of the different fields in the data the application uses.</p><p><img src="https://portfolio.drieam.app/api/public/v1/blobs/545ea1b8-b9c6-4fdf-9e1d-cab50ed05fbf/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBKzAyQXc9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--a86ffd01545eeb1da440c05935f49a1166299afb/image_2024-04-09_150329689.png" data-key="o7i66rdewmsblfnbckqcwvye7ei3"><br>The information is described using CIA's classification of data, where</p><h2><span style="color: rgb(45, 59, 69)">- </span><strong>Availability</strong><span style="color: rgb(45, 59, 69)">: not needed (0), important (1), required (2), essential (3)</span><br><span style="color: rgb(45, 59, 69)">- </span><strong>Integrity</strong><span style="color: rgb(45, 59, 69)">: unprotected (0), protected (1), high (2), absolute (3)</span><br><span style="color: rgb(45, 59, 69)">- </span><strong>Confidentiality</strong><span style="color: rgb(45, 59, 69)">: public (0), company confidential (1), confidential (2), classified (3)</span><br><span style="color: rgb(45, 59, 69)">- </span><strong>Privacy</strong><span style="color: rgb(45, 59, 69)">: public (0), PII (p)</span><br><br><span style="color: rgb(45, 59, 69)">Database scaling</span></h2><p><span style="color: rgb(45, 59, 69)">In order to prevent bottlenecks in the system, the plan is to scale the databases in the cluster with replica sets. Since MongoDB is fast when writing, but slower when reading, this is a perfect approach. Replica sets in MongoDB make it so that there is 1 main node that is written to and changes are propagated, and several child nodes where READs are distributed equally.</span></p><p><span style="color: rgb(45, 59, 69)">Since this project is going to use MongoDB Atlas </span><span data-type="mention" data-id="438040" data-label="Cloud providers research" data-mention-type="evidence">@Cloud providers research</span> <span style="color: rgb(45, 59, 69)">, each cluster in Atlas is configured by default to use 3 replica sets.</span></p><p><img src="https://portfolio.drieam.app/api/public/v1/blobs/545ea1b8-b9c6-4fdf-9e1d-cab50ed05fbf/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBL0UyQXc9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--a525689d033d4bbd8b165e79dca48d81866d8c1c/image_2024-04-09_152555981.png" data-key="unihwqvs7o7lncbvezy4g0wnkspx">Moreover, sharding can be configured as well, which also takes advantage of replica sets to scale the database even further.</p><p><img src="https://portfolio.drieam.app/api/public/v1/blobs/545ea1b8-b9c6-4fdf-9e1d-cab50ed05fbf/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBL0kyQXc9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--ee11c88799bd36a214d0ed8468e7de33423a228e/image_2024-04-09_152652776.png" data-key="udv13jeuynmr0szn3mekuooupxka"></p> </body> </html>